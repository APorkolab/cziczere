name: Deploy Memory Garden

permissions:
  actions: read
  contents: read
  security-events: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '22'
  JAVA_VERSION: '17'
  FIREBASE_PROJECT_ID: 'cziczere-ai'

jobs:
  # Quality checks and testing
  quality-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm i

      - name: Lint frontend code
        working-directory: ./frontend
        run: npm run lint

      - name: Type check
        working-directory: ./frontend
        run: npm run build -- --configuration=production --aot

      - name: Run frontend tests
        working-directory: ./frontend
        run: echo "Frontend tests temporarily disabled - will be enabled after proper CI test setup"

      # - name: Upload coverage reports
      #   uses: codecov/codecov-action@v3
      #   with:
      #     directory: frontend/coverage/
      #     flags: frontend
      #     name: frontend-coverage

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm i

      - name: Run security audit
        working-directory: ./frontend
        run: npm audit --audit-level=high

      - name: Run Snyk security scan
        continue-on-error: true
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: test
          args: --file=frontend/package.json --severity-threshold=high
      
      - name: Run npm audit (fallback security check)
        working-directory: ./frontend
        run: npm audit --audit-level=high --production

      - name: Setup Java for CodeQL
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependencies for CodeQL
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('functions/pom.xml') }}

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, java
          
      - name: Build Java code for CodeQL
        working-directory: ./functions
        run: mvn compile test-compile

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Backend testing and deployment
  deploy-backend:
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'

      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('functions/pom.xml') }}

      - name: Test Cloud Functions
        working-directory: ./functions
        run: mvn test

      - name: Build Cloud Functions
        working-directory: ./functions
        run: mvn clean package

      - name: Setup Firebase CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.FIREBASE_PROJECT_ID }}
          export_default_credentials: true

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy Cloud Functions
        run: |
          firebase deploy --only functions --project ${{ env.FIREBASE_PROJECT_ID }} --token ${{ secrets.FIREBASE_TOKEN }}

  # Frontend build and deployment
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [quality-check, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm i

      - name: Create production environment
        working-directory: ./frontend/src/environments
        run: |
          cat > environment.prod.ts << EOF
          export const environment = {
            production: true,
            firebase: {
              apiKey: '${{ secrets.FIREBASE_API_KEY }}',
              authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}',
              projectId: '${{ secrets.FIREBASE_PROJECT_ID }}',
              storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}',
              messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}',
              appId: '${{ secrets.FIREBASE_APP_ID }}'
            },
            apis: {
              generateMemoryPlant: 'https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net/generateMemoryPlant',
              analyzeMemories: 'https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net/analyzeMemories',
              getAtmosphere: 'https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net/getAtmosphere',
              exportGarden: 'https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net/exportGarden',
              getInsightAudio: 'https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net/getInsightAudio',
              poeticRephrasing: 'https://us-central1-${{ env.FIREBASE_PROJECT_ID }}.cloudfunctions.net/poeticRephrasing',
              chatWebSocket: 'wss://${{ secrets.WEBSOCKET_DOMAIN }}/chat'
            },
            features: {
              enableAnalytics: true,
              enablePerformanceMonitoring: true,
              enableCrashlytics: true,
              enableNotifications: true,
              maxMemoriesPerUser: 1000,
              maxConversationHistory: 100,
              enableAdvancedAR: true,
              enableProfanityFilter: true,
              enableRateLimiting: true
            },
            monitoring: {
              sentryDsn: '${{ secrets.SENTRY_DSN }}',
              logLevel: 'warn',
              enableUserTracking: true,
              enableErrorReporting: true
            },
            performance: {
              enableServiceWorker: true,
              enableLazyLoading: true,
              enableImageOptimization: true,
              enableBundleAnalysis: false
            }
          };
          EOF

      - name: Build for production
        working-directory: ./frontend
        run: npm run build -- --configuration=production

      - name: Run bundle analyzer
        working-directory: ./frontend
        run: |
          npm run build -- --configuration=production --stats-json
          npx webpack-bundle-analyzer dist/frontend/stats.json --mode=static --report=bundle-report.html --no-open

      - name: Upload bundle report
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: frontend/bundle-report.html

      - name: Setup Firebase CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.FIREBASE_PROJECT_ID }}
          export_default_credentials: true

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Deploy to Firebase Hosting
        working-directory: ./frontend
        run: |
          firebase deploy --only hosting --project ${{ env.FIREBASE_PROJECT_ID }} --token ${{ secrets.FIREBASE_TOKEN }}

  # Performance testing
  performance-test:
    runs-on: ubuntu-latest
    needs: [deploy-frontend]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: Run Lighthouse CI
        run: |
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci/

  # Integration tests
  integration-test:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Playwright
        run: |
          npm init playwright@latest
          npx playwright install

      - name: Run integration tests
        run: npx playwright test
        env:
          BASE_URL: https://${{ env.FIREBASE_PROJECT_ID }}.web.app

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright-report/

  # Monitoring and notifications
  post-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend, performance-test, integration-test]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Notify deployment success
        if: needs.deploy-frontend.result == 'success' && needs.deploy-backend.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🚀 Memory Garden deployed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify deployment failure
        if: contains(needs.*.result, 'failure')
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Memory Garden deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create deployment record
        if: needs.deploy-frontend.result == 'success'
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.MONITORING_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "service": "memory-garden",
              "version": "${{ github.sha }}",
              "environment": "production",
              "deployed_at": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "deployed_by": "${{ github.actor }}"
            }' \
            ${{ secrets.MONITORING_WEBHOOK_URL }}

  # Automated monitoring setup
  setup-monitoring:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Setup health checks
        run: |
          # Create uptime monitoring
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.UPTIME_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "url": "https://${{ env.FIREBASE_PROJECT_ID }}.web.app",
              "name": "Memory Garden Frontend",
              "interval": 300,
              "timeout": 30
            }' \
            ${{ secrets.UPTIME_WEBHOOK_URL }}

      - name: Setup error tracking
        run: |
          # Configure Sentry release
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.SENTRY_AUTH_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.sha }}",
              "projects": ["memory-garden"]
            }' \
            https://sentry.io/api/0/organizations/${{ secrets.SENTRY_ORG }}/releases/
